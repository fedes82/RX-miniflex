
AVRASM ver. 2.1.30  C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm Mon Apr 10 14:37:14 2017

C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1060): warning: Register r7 already defined by the .DEF directive
C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1061): warning: Register r6 already defined by the .DEF directive
C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1062): warning: Register r8 already defined by the .DEF directive
C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1063): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16L
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16L
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _conv=R4
                 	.DEF _caracter=R7
                 	.DEF _temp=R6
                 	.DEF _i=R8
                 	.DEF _nropulso=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0055 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0085 	JMP  _timer1_compa_isr
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\GVSTAVO\Documents\GitHub\RX-miniflex\micro\List\rx1.asm(1101): warning: .cseg .db misalignment - padding zero byte
000033 0001      	.DB  0x1
                 _0x36:
000034 0000
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000037 6425
000038 000a
000039 434f
00003a 3152      	.DB  0x25,0x64,0xA,0x0,0x4F,0x43,0x52,0x31
00003b 4841
00003c 7620
00003d 6c61
00003e 2c65      	.DB  0x41,0x48,0x20,0x76,0x61,0x6C,0x65,0x2C
00003f 2520
000040 0a78
000041 4f00
000042 5243      	.DB  0x20,0x25,0x78,0xA,0x0,0x4F,0x43,0x52
000043 4131
000044 204c
000045 6176
000046 656c      	.DB  0x31,0x41,0x4C,0x20,0x76,0x61,0x6C,0x65
000047 2520
000048 0a78
000049 4300
00004a 4d4f      	.DB  0x20,0x25,0x78,0xA,0x0,0x43,0x4F,0x4D
00004b 4f20
00004c 204b
00004d 000a      	.DB  0x20,0x4F,0x4B,0x20,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
00004e 0001      	.DW  0x01
00004f 0162      	.DW  _Espero_300ms
000050 0066      	.DW  _0x3*2
                 
000051 0006      	.DW  0x06
000052 0006      	.DW  0x06
000053 0068      	.DW  _0x36*2
                 
                 _0xFFFFFFFF:
000054 0000      	.DW  0
                 
                 __RESET:
000055 94f8      	CLI
000056 27ee      	CLR  R30
000057 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000058 e0f1      	LDI  R31,1
000059 bffb      	OUT  GICR,R31
00005a bfeb      	OUT  GICR,R30
00005b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005c e1f8      	LDI  R31,0x18
00005d bdf1      	OUT  WDTCR,R31
00005e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007e bfed      	OUT  SPL,R30
00007f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000080 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000081 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000082 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000083 940c 00aa 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <ctype.h>
                 ;
                 ; // Constantes
                 ;
                 ;#define xtal 3686400L // Frecuencia de cristal en [Hz]
                 ;#define baud 9600     // define Baud rate
                 ;#define beep PORTD.3
                 ;#define pulso PIND.7
                 ;#define testpoint PORTD.4
                 ;
                 ;// Prototipos de Funciones
                 ;
                 ;void mide(void);
                 ;void beeper(void);
                 ;void configurar(void);
                 ;
                 ;
                 ;// global variables
                 ;
                 ;int conv;
                 ;float Rx;
                 ;char caracter=0, temp = 0;
                 ;volatile unsigned char compareH=0, compareL=0;
                 ;int i=0,nropulso = 0;;
                 ;//int cantidad;
                 ;//char buf[17];
                 ;volatile int Espero_300ms = 1, temptest =0;
                 
                 	.DSEG
                 ;
                 ;
                 ;
                 ;//**************** INTERRUPCIONES  ************//
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _timer1_compa_isr:
000085 93ea      	ST   -Y,R30
000086 93fa      	ST   -Y,R31
000087 b7ef      	IN   R30,SREG
000088 93ea      	ST   -Y,R30
                 ; 0000 0028 // Place your code here
                 ; 0000 0029     Espero_300ms = 0;
000089 e0e0      	LDI  R30,LOW(0)
00008a 93e0 0162 	STS  _Espero_300ms,R30
00008c 93e0 0163 	STS  _Espero_300ms+1,R30
                 ; 0000 002A 
                 ; 0000 002B   if (temptest )
00008e 91e0 0164 	LDS  R30,_temptest
000090 91f0 0165 	LDS  R31,_temptest+1
000092 9730      	SBIW R30,0
000093 f039      	BREQ _0x4
                 ; 0000 002C   {temptest =0;
000094 e0e0      	LDI  R30,LOW(0)
000095 93e0 0164 	STS  _temptest,R30
000097 93e0 0165 	STS  _temptest+1,R30
                 ; 0000 002D     testpoint =0;}
000099 9894      	CBI  0x12,4
                 ; 0000 002E    else
00009a c007      	RJMP _0x7
                 _0x4:
                 ; 0000 002F    {temptest =1;
00009b e0e1      	LDI  R30,LOW(1)
00009c e0f0      	LDI  R31,HIGH(1)
00009d 93e0 0164 	STS  _temptest,R30
00009f 93f0 0165 	STS  _temptest+1,R31
                 ; 0000 0030     testpoint =1;}
0000a1 9a94      	SBI  0x12,4
                 _0x7:
                 ; 0000 0031 
                 ; 0000 0032     TCNT1H=0x00;
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bded      	OUT  0x2D,R30
                 ; 0000 0033     TCNT1L=0x00;
0000a4 bdec      	OUT  0x2C,R30
                 ; 0000 0034 
                 ; 0000 0035 }
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91f9      	LD   R31,Y+
0000a8 91e9      	LD   R30,Y+
0000a9 9518      	RETI
                 ;
                 ;
                 ;//************** MAIN **************************/
                 ;
                 ;
                 ;void main(void)
                 ; 0000 003C {
                 _main:
                 ; 0000 003D     beeper();
0000aa d118      	RCALL _beeper
                 ; 0000 003E     configurar();
0000ab d0dd      	RCALL _configurar
                 ; 0000 003F     beeper();
0000ac d116      	RCALL _beeper
                 ; 0000 0040     beeper();
0000ad d115      	RCALL _beeper
                 ; 0000 0041 while(1) //loop principal
                 _0xA:
                 ; 0000 0042 {   inicio:
                 _0xD:
                 ; 0000 0043     beep = 1;
0000ae 9a93      	SBI  0x12,3
                 ; 0000 0044     caracter = getchar();
0000af d135      	RCALL _getchar
0000b0 2e7e      	MOV  R7,R30
                 ; 0000 0045     switch (caracter)
0000b1 2de7      	MOV  R30,R7
0000b2 e0f0      	LDI  R31,0
                 ; 0000 0046     {
                 ; 0000 0047         case 'i':
0000b3 36e9      	CPI  R30,LOW(0x69)
0000b4 e0a0      	LDI  R26,HIGH(0x69)
0000b5 07fa      	CPC  R31,R26
0000b6 f031      	BREQ _0x14
                 ; 0000 0048         case 'I':
0000b7 34e9      	CPI  R30,LOW(0x49)
0000b8 e0a0      	LDI  R26,HIGH(0x49)
0000b9 07fa      	CPC  R31,R26
0000ba f011      	BREQ PC+3
0000bb 940c 0173 	JMP _0x15
                 _0x14:
                 ; 0000 0049             // modo medicion, mide cada 300ms 49 veces
                 ; 0000 004A             // (2grad/min => mide cada 0.01 grado)
                 ; 0000 004B             // y espera el flanco ascendente en el pin
                 ; 0000 004C             // para volver a empezar y quedar sincronizado con el marker
                 ; 0000 004D 
                 ; 0000 004E             TCCR1B=0x00;    //el timer esta apagado
0000bd e0e0      	LDI  R30,LOW(0)
0000be bdee      	OUT  0x2E,R30
                 ; 0000 004F             TCNT1H=0x00;    // y el contador vale cero
0000bf bded      	OUT  0x2D,R30
                 ; 0000 0050             TCNT1L=0x00;
0000c0 bdec      	OUT  0x2C,R30
                 ; 0000 0051             beeper();
0000c1 d101      	RCALL _beeper
                 ; 0000 0052             while (1)
                 _0x16:
                 ; 0000 0053             {
                 ; 0000 0054                 nropulso = 0;
0000c2 24aa      	CLR  R10
0000c3 24bb      	CLR  R11
                 ; 0000 0055                 Espero_300ms = 1;
0000c4 e0e1      	LDI  R30,LOW(1)
0000c5 e0f0      	LDI  R31,HIGH(1)
0000c6 93e0 0162 	STS  _Espero_300ms,R30
0000c8 93f0 0163 	STS  _Espero_300ms+1,R31
                 ; 0000 0056                 while(pulso == 1); //espera marker en bajo para empezar
                 _0x19:
0000ca 9987      	SBIC 0x10,7
0000cb cffe      	RJMP _0x19
                 ; 0000 0057                 //printf("mark\n");
                 ; 0000 0058                 TCCR1B=0x0C;    //con esto enciendo el timer
0000cc e0ec      	LDI  R30,LOW(12)
0000cd bdee      	OUT  0x2E,R30
                 ; 0000 0059                 mide();            // 80 mseg
0000ce d102      	RCALL _mide
                 ; 0000 005A                 //Rx=(float)conv*2560/1023;
                 ; 0000 005B                 //nropulso++;
                 ; 0000 005C                 //printf("%.2f\n",Rx); // 16.6 mseg en transmitir
                 ; 0000 005D                 //printf("pulso nro %d\n", nropulso);
                 ; 0000 005E                 printf("%d\n",conv);
                +
0000cf e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000d0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000d1 93fa      	ST   -Y,R31
0000d2 93ea      	ST   -Y,R30
0000d3 01f2      	MOVW R30,R4
0000d4 940e 03d0 	CALL __CWD1
0000d6 940e 03dd 	CALL __PUTPARD1
0000d8 e084      	LDI  R24,4
0000d9 940e 0380 	CALL _printf
0000db 9626      	ADIW R28,6
                 ; 0000 005F                 beeper();          // 100 mse
0000dc d0e6      	RCALL _beeper
                 ; 0000 0060                 for ( i=49; i>0; i-- )
0000dd e3e1      	LDI  R30,LOW(49)
0000de e0f0      	LDI  R31,HIGH(49)
0000df 014f      	MOVW R8,R30
                 _0x1D:
0000e0 2400      	CLR  R0
0000e1 1408      	CP   R0,R8
0000e2 0409      	CPC  R0,R9
0000e3 f014      	BRLT PC+3
0000e4 940c 0168 	JMP _0x1E
                 ; 0000 0061                 {
                 ; 0000 0062                     while(Espero_300ms);    //el timer pone Espero_300ms = 0 en la interrupcion
                 _0x1F:
0000e6 91e0 0162 	LDS  R30,_Espero_300ms
0000e8 91f0 0163 	LDS  R31,_Espero_300ms+1
0000ea 9730      	SBIW R30,0
0000eb f7d1      	BRNE _0x1F
                 ; 0000 0063                     Espero_300ms = 1;   //
0000ec e0e1      	LDI  R30,LOW(1)
0000ed e0f0      	LDI  R31,HIGH(1)
0000ee 93e0 0162 	STS  _Espero_300ms,R30
0000f0 93f0 0163 	STS  _Espero_300ms+1,R31
                 ; 0000 0064                     mide();            // 80 mseg
0000f2 d0de      	RCALL _mide
                 ; 0000 0065                     //Rx=(float)conv*2560/1023;
                 ; 0000 0066                     //nropulso++;
                 ; 0000 0067                     //printf("%.2f\n",Rx); // 16.6 mseg en transmitir
                 ; 0000 0068                     printf("%d\n",conv);
                +
0000f3 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000f4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000f5 93fa      	ST   -Y,R31
0000f6 93ea      	ST   -Y,R30
0000f7 01f2      	MOVW R30,R4
0000f8 940e 03d0 	CALL __CWD1
0000fa 940e 03dd 	CALL __PUTPARD1
0000fc e084      	LDI  R24,4
0000fd 940e 0380 	CALL _printf
0000ff 9626      	ADIW R28,6
                 ; 0000 0069                  //   printf("pulso nro %d\n", nropulso);
                 ; 0000 006A 
                 ; 0000 006B                     beeper();          // 100 mse
000100 d0c2      	RCALL _beeper
                 ; 0000 006C                     if (UCSRA & 0b10000000) //comprobar si hay un byte para leer en la uart
000101 9b5f      	SBIS 0xB,7
000102 c061      	RJMP _0x22
                 ; 0000 006D                     {
                 ; 0000 006E                         temp = getchar();
000103 d0e1      	RCALL _getchar
000104 2e6e      	MOV  R6,R30
                 ; 0000 006F                         switch( temp)
000105 2de6      	MOV  R30,R6
000106 e0f0      	LDI  R31,0
                 ; 0000 0070                         {
                 ; 0000 0071                             case 'T':   //condicion para terminar, recibir una 'T'
000107 35e4      	CPI  R30,LOW(0x54)
000108 e0a0      	LDI  R26,HIGH(0x54)
000109 07fa      	CPC  R31,R26
00010a f471      	BRNE _0x26
                 ; 0000 0072                                 Espero_300ms = 1;
00010b e0e1      	LDI  R30,LOW(1)
00010c e0f0      	LDI  R31,HIGH(1)
00010d 93e0 0162 	STS  _Espero_300ms,R30
00010f 93f0 0163 	STS  _Espero_300ms+1,R31
                 ; 0000 0073                                 TCCR1B=0x00;    //con esto apago el timer
000111 e0e0      	LDI  R30,LOW(0)
000112 bdee      	OUT  0x2E,R30
                 ; 0000 0074                                 TCNT1H=0x00;    // y el contador vale cero
000113 bded      	OUT  0x2D,R30
                 ; 0000 0075                                 TCNT1L=0x00;
000114 bdec      	OUT  0x2C,R30
                 ; 0000 0076                                 beeper();          // 100 mse
000115 d0ad      	RCALL _beeper
                 ; 0000 0077                                 beeper();          // 100 mse
000116 d0ac      	RCALL _beeper
                 ; 0000 0078                                 beeper();          // 100 mse
000117 d0ab      	RCALL _beeper
                 ; 0000 0079                                 goto inicio;
000118 cf95      	RJMP _0xD
                 ; 0000 007A                                 break;
                 ; 0000 007B 
                 ; 0000 007C                             case 'U':   //aumento el delay entre mediciones
                 _0x26:
000119 35e5      	CPI  R30,LOW(0x55)
00011a e0a0      	LDI  R26,HIGH(0x55)
00011b 07fa      	CPC  R31,R26
00011c f431      	BRNE _0x27
                 ; 0000 007D                                 compareH += 1;
00011d 91e0 0160 	LDS  R30,_compareH
00011f 5fef      	SUBI R30,-LOW(1)
000120 93e0 0160 	STS  _compareH,R30
                 ; 0000 007E                                 break;
000122 c01f      	RJMP _0x25
                 ; 0000 007F                             case 'u':   //aumento el delay entre mediciones
                 _0x27:
000123 37e5      	CPI  R30,LOW(0x75)
000124 e0a0      	LDI  R26,HIGH(0x75)
000125 07fa      	CPC  R31,R26
000126 f431      	BRNE _0x28
                 ; 0000 0080                                 compareL += 10;
000127 91e0 0161 	LDS  R30,_compareL
000129 5fe6      	SUBI R30,-LOW(10)
00012a 93e0 0161 	STS  _compareL,R30
                 ; 0000 0081                                 break;
00012c c015      	RJMP _0x25
                 ; 0000 0082                             case 'L':   //disminuyo el delay entre mediciones
                 _0x28:
00012d 34ec      	CPI  R30,LOW(0x4C)
00012e e0a0      	LDI  R26,HIGH(0x4C)
00012f 07fa      	CPC  R31,R26
000130 f439      	BRNE _0x29
                 ; 0000 0083                                 compareH -= 1 ;
000131 91e0 0160 	LDS  R30,_compareH
000133 e0f0      	LDI  R31,0
000134 9731      	SBIW R30,1
000135 93e0 0160 	STS  _compareH,R30
                 ; 0000 0084                                 break;
000137 c00a      	RJMP _0x25
                 ; 0000 0085                             case 'l':   //disminuyo el delay entre mediciones
                 _0x29:
000138 36ec      	CPI  R30,LOW(0x6C)
000139 e0a0      	LDI  R26,HIGH(0x6C)
00013a 07fa      	CPC  R31,R26
00013b f431      	BRNE _0x2B
                 ; 0000 0086                                 compareL -=10 ;
00013c 91e0 0161 	LDS  R30,_compareL
00013e e0f0      	LDI  R31,0
00013f 973a      	SBIW R30,10
000140 93e0 0161 	STS  _compareL,R30
                 ; 0000 0087                                 break;
                 ; 0000 0088                             default:
                 _0x2B:
                 ; 0000 0089                                 break;
                 ; 0000 008A                         }
                 _0x25:
                 ; 0000 008B                         OCR1AH = compareH;
000142 91e0 0160 	LDS  R30,_compareH
000144 bdeb      	OUT  0x2B,R30
                 ; 0000 008C                         OCR1AL = compareL;
000145 91e0 0161 	LDS  R30,_compareL
000147 bdea      	OUT  0x2A,R30
                 ; 0000 008D                         printf("OCR1AH vale, %x\n", OCR1AH);
                +
000148 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000149 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
00014a 93fa      	ST   -Y,R31
00014b 93ea      	ST   -Y,R30
00014c b5eb      	IN   R30,0x2B
00014d 27ff      	CLR  R31
00014e 2766      	CLR  R22
00014f 2777      	CLR  R23
000150 940e 03dd 	CALL __PUTPARD1
000152 e084      	LDI  R24,4
000153 940e 0380 	CALL _printf
000155 9626      	ADIW R28,6
                 ; 0000 008E                         printf("OCR1AL vale %x\n", OCR1AL);
                +
000156 e8e3     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000157 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000158 93fa      	ST   -Y,R31
000159 93ea      	ST   -Y,R30
00015a b5ea      	IN   R30,0x2A
00015b 27ff      	CLR  R31
00015c 2766      	CLR  R22
00015d 2777      	CLR  R23
00015e 940e 03dd 	CALL __PUTPARD1
000160 e084      	LDI  R24,4
000161 940e 0380 	CALL _printf
000163 9626      	ADIW R28,6
                 ; 0000 008F 
                 ; 0000 0090                     }
                 ; 0000 0091                 }
                 _0x22:
000164 01f4      	MOVW R30,R8
000165 9731      	SBIW R30,1
000166 014f      	MOVW R8,R30
000167 cf78      	RJMP _0x1D
                 _0x1E:
                 ; 0000 0092                 Espero_300ms = 1;
000168 e0e1      	LDI  R30,LOW(1)
000169 e0f0      	LDI  R31,HIGH(1)
00016a 93e0 0162 	STS  _Espero_300ms,R30
00016c 93f0 0163 	STS  _Espero_300ms+1,R31
                 ; 0000 0093                 TCCR1B=0x00;    //con esto apago el timer
00016e e0e0      	LDI  R30,LOW(0)
00016f bdee      	OUT  0x2E,R30
                 ; 0000 0094                 TCNT1H=0x00;    // y el contador vale cero
000170 bded      	OUT  0x2D,R30
                 ; 0000 0095                 TCNT1L=0x00;
000171 bdec      	OUT  0x2C,R30
                 ; 0000 0096 
                 ; 0000 0097             }
000172 cf4f      	RJMP _0x16
                 ; 0000 0098             break;
                 ; 0000 0099         case 'p':
                 _0x15:
000173 37e0      	CPI  R30,LOW(0x70)
000174 e0a0      	LDI  R26,HIGH(0x70)
000175 07fa      	CPC  R31,R26
000176 f021      	BREQ _0x2D
                 ; 0000 009A         case 'P':
000177 35e0      	CPI  R30,LOW(0x50)
000178 e0a0      	LDI  R26,HIGH(0x50)
000179 07fa      	CPC  R31,R26
00017a f451      	BRNE _0x2F
                 _0x2D:
                 ; 0000 009B             // Prueba de comunicacion
                 ; 0000 009C             printf("COM OK \n");
                +
00017b e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
00017c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
00017d 93fa      	ST   -Y,R31
00017e 93ea      	ST   -Y,R30
00017f e080      	LDI  R24,0
000180 940e 0380 	CALL _printf
000182 9622      	ADIW R28,2
                 ; 0000 009D             beeper();          // 100 mse
000183 d03f      	RCALL _beeper
                 ; 0000 009E             break;
000184 c002      	RJMP _0x12
                 ; 0000 009F         default:
                 _0x2F:
                 ; 0000 00A0             putchar(caracter);
000185 927a      	ST   -Y,R7
000186 d062      	RCALL _putchar
                 ; 0000 00A1             break;
                 ; 0000 00A2 
                 ; 0000 00A3     }
                 _0x12:
                 ; 0000 00A4 
                 ; 0000 00A5 }// fin loop principal
000187 cf26      	RJMP _0xA
                 ; 0000 00A6 }
                 _0x30:
000188 cfff      	RJMP _0x30
                 ;
                 ;    /*
                 ;    while(pulso == 1);      // espera pulso  y manda primer medida
                 ;    mide();            // 80 mseg
                 ;    Rx=(float)conv*2560/1023;
                 ;    printf("%.2f",Rx); // 16.6 mseg en transmitir
                 ;    beeper();          // 100 mseg
                 ;
                 ;    while(1)
                 ;    {
                 ;        switch(getchar())// espera que llegue la orden de medor
                 ;        {
                 ;            case '1':mide();            // 80 mseg
                 ;                  Rx=(float)conv*2560/1023;
                 ;                  printf("%.2f",Rx); // 16.6 mseg en transmitir
                 ;                  beeper();          // 100 mseg
                 ;                  break;             //
                 ;            case 'T':goto inicio;
                 ;            case 'P':printf("comunicacion ON /n");
                 ;                  break;
                 ;        }
                 ;    }
                 ;}
                 ;*/
                 ;
                 ;/*************************************************
                 ;                    FUNCIONES
                 ;**************************************************/
                 ;
                 ;
                 ;/*------------------ FUNCION CONFIGURAR ----------------*/
                 ;
                 ;void configurar(void)
                 ; 0000 00C8 {
                 _configurar:
                 ; 0000 00C9      MCUCR=0X00;      // asegura no memoria externa
000189 e0e0      	LDI  R30,LOW(0)
00018a bfe5      	OUT  0x35,R30
                 ; 0000 00CA 
                 ; 0000 00CB      DDRA=0X00;       //Puera A entradas analogicas
00018b bbea      	OUT  0x1A,R30
                 ; 0000 00CC      PORTA=0XF0;      //habilita pull-up MSB
00018c efe0      	LDI  R30,LOW(240)
00018d bbeb      	OUT  0x1B,R30
                 ; 0000 00CD 
                 ; 0000 00CE      DDRB=0XFF;       // LSB salidas = control display
00018e efef      	LDI  R30,LOW(255)
00018f bbe7      	OUT  0x17,R30
                 ; 0000 00CF      PORTB=0XFF;      // MSB salidas = SPI y RAM
000190 bbe8      	OUT  0x18,R30
                 ; 0000 00D0 
                 ; 0000 00D1      DDRC=0b00000000; // LSB entradas = Teclado
000191 e0e0      	LDI  R30,LOW(0)
000192 bbe4      	OUT  0x14,R30
                 ; 0000 00D2      PORTC=0xFF;      // 1/2 MSB entradas =llsve y seguro
000193 efef      	LDI  R30,LOW(255)
000194 bbe5      	OUT  0x15,R30
                 ; 0000 00D3 
                 ; 0000 00D4      DDRD=0x1F;       // LSB RS232, interrup y chirrara y testpoint
000195 e1ef      	LDI  R30,LOW(31)
000196 bbe1      	OUT  0x11,R30
                 ; 0000 00D5      PORTD=0xFF;      // MSB entradas con Pull- UP
000197 efef      	LDI  R30,LOW(255)
000198 bbe2      	OUT  0x12,R30
                 ; 0000 00D6 
                 ; 0000 00D7 
                 ; 0000 00D8       /*----------- inicializa Puerta serie ----------- */
                 ; 0000 00D9 
                 ; 0000 00DA      UCSRA=0x00;   //  4800 Baudios  8 Data, 1 Stop, No Parity
000199 e0e0      	LDI  R30,LOW(0)
00019a b9eb      	OUT  0xB,R30
                 ; 0000 00DB      UCSRB=0x18;   //  Rx On ; Tx On
00019b e1e8      	LDI  R30,LOW(24)
00019c b9ea      	OUT  0xA,R30
                 ; 0000 00DC      UCSRC=0x86;   //  USART modo asincronico
00019d e8e6      	LDI  R30,LOW(134)
00019e bde0      	OUT  0x20,R30
                 ; 0000 00DD      UBRRH=0x00;
00019f e0e0      	LDI  R30,LOW(0)
0001a0 bde0      	OUT  0x20,R30
                 ; 0000 00DE      UBRRL=xtal/16/baud-1;  //4800
0001a1 e1e7      	LDI  R30,LOW(23)
0001a2 b9e9      	OUT  0x9,R30
                 ; 0000 00DF      //UBRRL=0x17;        //0x17 => 9600
                 ; 0000 00E0 
                 ; 0000 00E1      /*---------- Inicializa ADC ------------------*/
                 ; 0000 00E2 
                 ; 0000 00E3      ADCSRA=0x86;     // ADC Clock frequencia: 57.656 kHz
0001a3 e8e6      	LDI  R30,LOW(134)
0001a4 b9e6      	OUT  0x6,R30
                 ; 0000 00E4                       // sin interrupcion
                 ; 0000 00E5      ADMUX=0b11000000;// Selecciona input simple en canal 0
0001a5 ece0      	LDI  R30,LOW(192)
0001a6 b9e7      	OUT  0x7,R30
                 ; 0000 00E6                       // y referencia interna=2,56V
                 ; 0000 00E7 
                 ; 0000 00E8      /*-------------- Inicializa Timer1 ---------------*/
                 ; 0000 00E9     // Timer/Counter 1 initialization
                 ; 0000 00EA     // Clock source: System Clock
                 ; 0000 00EB     // Clock value: 31,250 kHz
                 ; 0000 00EC     // Mode: CTC top=OCR1A
                 ; 0000 00ED     // OC1A output: Discon.
                 ; 0000 00EE     // OC1B output: Discon.
                 ; 0000 00EF     // Noise Canceler: Off
                 ; 0000 00F0     // Input Capture on Falling Edge
                 ; 0000 00F1     // Timer1 Overflow Interrupt: Off
                 ; 0000 00F2     // Input Capture Interrupt: Off
                 ; 0000 00F3     // Compare A Match Interrupt: On
                 ; 0000 00F4     // Compare B Match Interrupt: Off
                 ; 0000 00F5 
                 ; 0000 00F6 
                 ; 0000 00F7     TCCR1A=0x00;
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 bdef      	OUT  0x2F,R30
                 ; 0000 00F8     TCCR1B=0x0C;
0001a9 e0ec      	LDI  R30,LOW(12)
0001aa bdee      	OUT  0x2E,R30
                 ; 0000 00F9     TCNT1H=0x00;
0001ab e0e0      	LDI  R30,LOW(0)
0001ac bded      	OUT  0x2D,R30
                 ; 0000 00FA     TCNT1L=0x00;
0001ad bdec      	OUT  0x2C,R30
                 ; 0000 00FB     ICR1H=0x00;
0001ae bde7      	OUT  0x27,R30
                 ; 0000 00FC     ICR1L=0x00;
0001af bde6      	OUT  0x26,R30
                 ; 0000 00FD     //compareH = 0x21;
                 ; 0000 00FE     //compareL =0xAD;
                 ; 0000 00FF     //  el valor haciendo cuentas me de h21C0, para un prescaler de 256, que es lo que esta elegido
                 ; 0000 0100     //   el valor que esta puesto es bajisimo, es h10d6, probemos,
                 ; 0000 0101     //   sino probemos con h10e0 que anda por ahi
                 ; 0000 0102     compareH = 0x21;
0001b0 e2e1      	LDI  R30,LOW(33)
0001b1 93e0 0160 	STS  _compareH,R30
                 ; 0000 0103     compareL =0xAD;
0001b3 eaed      	LDI  R30,LOW(173)
0001b4 93e0 0161 	STS  _compareL,R30
                 ; 0000 0104     OCR1AH=compareH;
0001b6 91e0 0160 	LDS  R30,_compareH
0001b8 bdeb      	OUT  0x2B,R30
                 ; 0000 0105     OCR1AL=compareL;
0001b9 91e0 0161 	LDS  R30,_compareL
0001bb bdea      	OUT  0x2A,R30
                 ; 0000 0106     OCR1BH=0x00;
0001bc e0e0      	LDI  R30,LOW(0)
0001bd bde9      	OUT  0x29,R30
                 ; 0000 0107     OCR1BL=0x00;
0001be bde8      	OUT  0x28,R30
                 ; 0000 0108 
                 ; 0000 0109     /*inicializacion de interrupciones del timer*/
                 ; 0000 010A     TIMSK=0x10;
0001bf e1e0      	LDI  R30,LOW(16)
0001c0 bfe9      	OUT  0x39,R30
                 ; 0000 010B 
                 ; 0000 010C     //habilito globalmente las interruciones
                 ; 0000 010D     #asm("sei")
0001c1 9478      	sei
                 ; 0000 010E 
                 ; 0000 010F }
0001c2 9508      	RET
                 ;
                 ;/*--------------- FUNCION BEEPER ------------------------------------*/
                 ;
                 ; void beeper(void)
                 ; 0000 0114   {
                 _beeper:
                 ; 0000 0115     beep = 0;
0001c3 9893      	CBI  0x12,3
                 ; 0000 0116     delay_ms(50);
0001c4 e3e2      	LDI  R30,LOW(50)
0001c5 e0f0      	LDI  R31,HIGH(50)
0001c6 93fa      	ST   -Y,R31
0001c7 93ea      	ST   -Y,R30
0001c8 940e 03bc 	CALL _delay_ms
                 ; 0000 0117     if(conv < 799){ beep = 1;} // si es manor a 2v = 799 cuentas apaga
0001ca e1ef      	LDI  R30,LOW(799)
0001cb e0f3      	LDI  R31,HIGH(799)
0001cc 164e      	CP   R4,R30
0001cd 065f      	CPC  R5,R31
0001ce f40c      	BRGE _0x33
0001cf 9a93      	SBI  0x12,3
                 ; 0000 0118     //delay_ms(150);
                 ; 0000 0119 
                 ; 0000 011A 
                 ; 0000 011B   }
                 _0x33:
0001d0 9508      	RET
                 ;
                 ; /*------------------ FUNCION MIDE ----------------*/
                 ;
                 ;
                 ;void mide(void)
                 ; 0000 0121 {
                 _mide:
                 ; 0000 0122  // mide
                 ; 0000 0123   ADMUX=0b11000000;   // entrada simple canal 0
0001d1 ece0      	LDI  R30,LOW(192)
0001d2 b9e7      	OUT  0x7,R30
                 ; 0000 0124   delay_ms(70);      // y referencia interna = 2,56V
0001d3 e4e6      	LDI  R30,LOW(70)
0001d4 e0f0      	LDI  R31,HIGH(70)
0001d5 93fa      	ST   -Y,R31
0001d6 93ea      	ST   -Y,R30
0001d7 940e 03bc 	CALL _delay_ms
                 ; 0000 0125   ADCSRA|=0x40;       // Arranca conversor AD
0001d9 9a36      	SBI  0x6,6
                 ; 0000 0126   delay_ms(10);
0001da e0ea      	LDI  R30,LOW(10)
0001db e0f0      	LDI  R31,HIGH(10)
0001dc 93fa      	ST   -Y,R31
0001dd 93ea      	ST   -Y,R30
0001de 940e 03bc 	CALL _delay_ms
                 ; 0000 0127   conv=ADCW & 0x03FF; // adquiere el dato en 10 bits
0001e0 b1e4      	IN   R30,0x4
0001e1 b1f5      	IN   R31,0x4+1
0001e2 70f3      	ANDI R31,HIGH(0x3FF)
0001e3 012f      	MOVW R4,R30
                 ; 0000 0128                       // 2560 mV = 1024 cuentas = 2.56 volts =>
                 ; 0000 0129   //conv=0x03ff;        // esto para probar
                 ; 0000 012A }
0001e4 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 getchar0:
0001e5 9b5f           sbis usr,rxc
0001e6 cffe           rjmp getchar0
0001e7 b1ec           in   r30,udr
0001e8 9508      	RET
                 _putchar:
                 putchar0:
0001e9 9b5d           sbis usr,udre
0001ea cffe           rjmp putchar0
0001eb 81e8           ld   r30,y
0001ec b9ec           out  udr,r30
0001ed 9621      	ADIW R28,1
0001ee 9508      	RET
                 _put_usart_G100:
0001ef 81ea      	LDD  R30,Y+2
0001f0 93ea      	ST   -Y,R30
0001f1 dff7      	RCALL _putchar
0001f2 81a8      	LD   R26,Y
0001f3 81b9      	LDD  R27,Y+1
0001f4 91ed      	LD   R30,X+
0001f5 91fd      	LD   R31,X+
0001f6 9631      	ADIW R30,1
0001f7 93fe      	ST   -X,R31
0001f8 93ee      	ST   -X,R30
0001f9 9623      	ADIW R28,3
0001fa 9508      	RET
                 __print_G100:
0001fb 9726      	SBIW R28,6
0001fc 940e 03e2 	CALL __SAVELOCR6
0001fe e010      	LDI  R17,0
0001ff 85ac      	LDD  R26,Y+12
000200 85bd      	LDD  R27,Y+12+1
000201 e0e0      	LDI  R30,LOW(0)
000202 e0f0      	LDI  R31,HIGH(0)
000203 93ed      	ST   X+,R30
000204 93fc      	ST   X,R31
                 _0x2000016:
000205 89ea      	LDD  R30,Y+18
000206 89fb      	LDD  R31,Y+18+1
000207 9631      	ADIW R30,1
000208 8bea      	STD  Y+18,R30
000209 8bfb      	STD  Y+18+1,R31
00020a 9731      	SBIW R30,1
00020b 91e4      	LPM  R30,Z
00020c 2f2e      	MOV  R18,R30
00020d 30e0      	CPI  R30,0
00020e f411      	BRNE PC+3
00020f 940c 0378 	JMP _0x2000018
000211 2fe1      	MOV  R30,R17
000212 30e0      	CPI  R30,0
000213 f469      	BRNE _0x200001C
000214 3225      	CPI  R18,37
000215 f411      	BRNE _0x200001D
000216 e011      	LDI  R17,LOW(1)
000217 c008      	RJMP _0x200001E
                 _0x200001D:
000218 932a      	ST   -Y,R18
000219 85ed      	LDD  R30,Y+13
00021a 85fe      	LDD  R31,Y+13+1
00021b 93fa      	ST   -Y,R31
00021c 93ea      	ST   -Y,R30
00021d 89e9      	LDD  R30,Y+17
00021e 89fa      	LDD  R31,Y+17+1
00021f 9509      	ICALL
                 _0x200001E:
000220 c156      	RJMP _0x200001B
                 _0x200001C:
000221 30e1      	CPI  R30,LOW(0x1)
000222 f4d9      	BRNE _0x200001F
000223 3225      	CPI  R18,37
000224 f449      	BRNE _0x2000020
000225 932a      	ST   -Y,R18
000226 85ed      	LDD  R30,Y+13
000227 85fe      	LDD  R31,Y+13+1
000228 93fa      	ST   -Y,R31
000229 93ea      	ST   -Y,R30
00022a 89e9      	LDD  R30,Y+17
00022b 89fa      	LDD  R31,Y+17+1
00022c 9509      	ICALL
00022d c148      	RJMP _0x20000C9
                 _0x2000020:
00022e e012      	LDI  R17,LOW(2)
00022f e040      	LDI  R20,LOW(0)
000230 e000      	LDI  R16,LOW(0)
000231 322d      	CPI  R18,45
000232 f411      	BRNE _0x2000021
000233 e001      	LDI  R16,LOW(1)
000234 c142      	RJMP _0x200001B
                 _0x2000021:
000235 322b      	CPI  R18,43
000236 f411      	BRNE _0x2000022
000237 e24b      	LDI  R20,LOW(43)
000238 c13e      	RJMP _0x200001B
                 _0x2000022:
000239 3220      	CPI  R18,32
00023a f411      	BRNE _0x2000023
00023b e240      	LDI  R20,LOW(32)
00023c c13a      	RJMP _0x200001B
                 _0x2000023:
00023d c002      	RJMP _0x2000024
                 _0x200001F:
00023e 30e2      	CPI  R30,LOW(0x2)
00023f f439      	BRNE _0x2000025
                 _0x2000024:
000240 e050      	LDI  R21,LOW(0)
000241 e013      	LDI  R17,LOW(3)
000242 3320      	CPI  R18,48
000243 f411      	BRNE _0x2000026
000244 6800      	ORI  R16,LOW(128)
000245 c131      	RJMP _0x200001B
                 _0x2000026:
000246 c004      	RJMP _0x2000027
                 _0x2000025:
000247 30e3      	CPI  R30,LOW(0x3)
000248 f011      	BREQ PC+3
000249 940c 0377 	JMP _0x200001B
                 _0x2000027:
00024b 3320      	CPI  R18,48
00024c f010      	BRLO _0x200002A
00024d 332a      	CPI  R18,58
00024e f008      	BRLO _0x200002B
                 _0x200002A:
00024f c007      	RJMP _0x2000029
                 _0x200002B:
000250 e0aa      	LDI  R26,LOW(10)
000251 9f5a      	MUL  R21,R26
000252 2d50      	MOV  R21,R0
000253 2fe2      	MOV  R30,R18
000254 53e0      	SUBI R30,LOW(48)
000255 0f5e      	ADD  R21,R30
000256 c120      	RJMP _0x200001B
                 _0x2000029:
000257 2fe2      	MOV  R30,R18
000258 36e3      	CPI  R30,LOW(0x63)
000259 f479      	BRNE _0x200002F
00025a 89e8      	LDD  R30,Y+16
00025b 89f9      	LDD  R31,Y+16+1
00025c 9734      	SBIW R30,4
00025d 8be8      	STD  Y+16,R30
00025e 8bf9      	STD  Y+16+1,R31
00025f 81a4      	LDD  R26,Z+4
000260 93aa      	ST   -Y,R26
000261 85ed      	LDD  R30,Y+13
000262 85fe      	LDD  R31,Y+13+1
000263 93fa      	ST   -Y,R31
000264 93ea      	ST   -Y,R30
000265 89e9      	LDD  R30,Y+17
000266 89fa      	LDD  R31,Y+17+1
000267 9509      	ICALL
000268 c10d      	RJMP _0x2000030
                 _0x200002F:
000269 37e3      	CPI  R30,LOW(0x73)
00026a f491      	BRNE _0x2000032
00026b 89e8      	LDD  R30,Y+16
00026c 89f9      	LDD  R31,Y+16+1
00026d 9734      	SBIW R30,4
00026e 8be8      	STD  Y+16,R30
00026f 8bf9      	STD  Y+16+1,R31
000270 89a8      	LDD  R26,Y+16
000271 89b9      	LDD  R27,Y+16+1
000272 9614      	ADIW R26,4
000273 940e 03d5 	CALL __GETW1P
000275 83ee      	STD  Y+6,R30
000276 83ff      	STD  Y+6+1,R31
000277 93fa      	ST   -Y,R31
000278 93ea      	ST   -Y,R30
000279 940e 03a7 	CALL _strlen
00027b 2f1e      	MOV  R17,R30
00027c c014      	RJMP _0x2000033
                 _0x2000032:
00027d 37e0      	CPI  R30,LOW(0x70)
00027e f4b1      	BRNE _0x2000035
00027f 89e8      	LDD  R30,Y+16
000280 89f9      	LDD  R31,Y+16+1
000281 9734      	SBIW R30,4
000282 8be8      	STD  Y+16,R30
000283 8bf9      	STD  Y+16+1,R31
000284 89a8      	LDD  R26,Y+16
000285 89b9      	LDD  R27,Y+16+1
000286 9614      	ADIW R26,4
000287 940e 03d5 	CALL __GETW1P
000289 83ee      	STD  Y+6,R30
00028a 83ff      	STD  Y+6+1,R31
00028b 93fa      	ST   -Y,R31
00028c 93ea      	ST   -Y,R30
00028d 940e 03b1 	CALL _strlenf
00028f 2f1e      	MOV  R17,R30
000290 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000291 6002      	ORI  R16,LOW(2)
000292 770f      	ANDI R16,LOW(127)
000293 e030      	LDI  R19,LOW(0)
000294 c043      	RJMP _0x2000036
                 _0x2000035:
000295 36e4      	CPI  R30,LOW(0x64)
000296 f011      	BREQ _0x2000039
000297 36e9      	CPI  R30,LOW(0x69)
000298 f411      	BRNE _0x200003A
                 _0x2000039:
000299 6004      	ORI  R16,LOW(4)
00029a c002      	RJMP _0x200003B
                 _0x200003A:
00029b 37e5      	CPI  R30,LOW(0x75)
00029c f431      	BRNE _0x200003C
                 _0x200003B:
00029d e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00029e e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00029f 83ee      	STD  Y+6,R30
0002a0 83ff      	STD  Y+6+1,R31
0002a1 e015      	LDI  R17,LOW(5)
0002a2 c00d      	RJMP _0x200003D
                 _0x200003C:
0002a3 35e8      	CPI  R30,LOW(0x58)
0002a4 f411      	BRNE _0x200003F
0002a5 6008      	ORI  R16,LOW(8)
0002a6 c004      	RJMP _0x2000040
                 _0x200003F:
0002a7 37e8      	CPI  R30,LOW(0x78)
0002a8 f011      	BREQ PC+3
0002a9 940c 0376 	JMP _0x2000071
                 _0x2000040:
0002ab e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0002ac e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002ad 83ee      	STD  Y+6,R30
0002ae 83ff      	STD  Y+6+1,R31
0002af e014      	LDI  R17,LOW(4)
                 _0x200003D:
0002b0 ff02      	SBRS R16,2
0002b1 c01a      	RJMP _0x2000042
0002b2 89e8      	LDD  R30,Y+16
0002b3 89f9      	LDD  R31,Y+16+1
0002b4 9734      	SBIW R30,4
0002b5 8be8      	STD  Y+16,R30
0002b6 8bf9      	STD  Y+16+1,R31
0002b7 89a8      	LDD  R26,Y+16
0002b8 89b9      	LDD  R27,Y+16+1
0002b9 9614      	ADIW R26,4
0002ba 940e 03d5 	CALL __GETW1P
0002bc 87ea      	STD  Y+10,R30
0002bd 87fb      	STD  Y+10+1,R31
0002be 85ab      	LDD  R26,Y+11
0002bf 23aa      	TST  R26
0002c0 f42a      	BRPL _0x2000043
0002c1 940e 03cc 	CALL __ANEGW1
0002c3 87ea      	STD  Y+10,R30
0002c4 87fb      	STD  Y+10+1,R31
0002c5 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0002c6 3040      	CPI  R20,0
0002c7 f011      	BREQ _0x2000044
0002c8 5f1f      	SUBI R17,-LOW(1)
0002c9 c001      	RJMP _0x2000045
                 _0x2000044:
0002ca 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0002cb c00c      	RJMP _0x2000046
                 _0x2000042:
0002cc 89e8      	LDD  R30,Y+16
0002cd 89f9      	LDD  R31,Y+16+1
0002ce 9734      	SBIW R30,4
0002cf 8be8      	STD  Y+16,R30
0002d0 8bf9      	STD  Y+16+1,R31
0002d1 89a8      	LDD  R26,Y+16
0002d2 89b9      	LDD  R27,Y+16+1
0002d3 9614      	ADIW R26,4
0002d4 940e 03d5 	CALL __GETW1P
0002d6 87ea      	STD  Y+10,R30
0002d7 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0002d8 fd00      	SBRC R16,0
0002d9 c017      	RJMP _0x2000047
                 _0x2000048:
0002da 1715      	CP   R17,R21
0002db f4a8      	BRSH _0x200004A
0002dc ff07      	SBRS R16,7
0002dd c008      	RJMP _0x200004B
0002de ff02      	SBRS R16,2
0002df c004      	RJMP _0x200004C
0002e0 7f0b      	ANDI R16,LOW(251)
0002e1 2f24      	MOV  R18,R20
0002e2 5011      	SUBI R17,LOW(1)
0002e3 c001      	RJMP _0x200004D
                 _0x200004C:
0002e4 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0002e5 c001      	RJMP _0x200004E
                 _0x200004B:
0002e6 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0002e7 932a      	ST   -Y,R18
0002e8 85ed      	LDD  R30,Y+13
0002e9 85fe      	LDD  R31,Y+13+1
0002ea 93fa      	ST   -Y,R31
0002eb 93ea      	ST   -Y,R30
0002ec 89e9      	LDD  R30,Y+17
0002ed 89fa      	LDD  R31,Y+17+1
0002ee 9509      	ICALL
0002ef 5051      	SUBI R21,LOW(1)
0002f0 cfe9      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0002f1 2f31      	MOV  R19,R17
0002f2 ff01      	SBRS R16,1
0002f3 c01d      	RJMP _0x200004F
                 _0x2000050:
0002f4 3030      	CPI  R19,0
0002f5 f0d1      	BREQ _0x2000052
0002f6 ff03      	SBRS R16,3
0002f7 c006      	RJMP _0x2000053
0002f8 81ee      	LDD  R30,Y+6
0002f9 81ff      	LDD  R31,Y+6+1
0002fa 9125      	LPM  R18,Z+
0002fb 83ee      	STD  Y+6,R30
0002fc 83ff      	STD  Y+6+1,R31
0002fd c005      	RJMP _0x2000054
                 _0x2000053:
0002fe 81ae      	LDD  R26,Y+6
0002ff 81bf      	LDD  R27,Y+6+1
000300 912d      	LD   R18,X+
000301 83ae      	STD  Y+6,R26
000302 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000303 932a      	ST   -Y,R18
000304 85ed      	LDD  R30,Y+13
000305 85fe      	LDD  R31,Y+13+1
000306 93fa      	ST   -Y,R31
000307 93ea      	ST   -Y,R30
000308 89e9      	LDD  R30,Y+17
000309 89fa      	LDD  R31,Y+17+1
00030a 9509      	ICALL
00030b 3050      	CPI  R21,0
00030c f009      	BREQ _0x2000055
00030d 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00030e 5031      	SUBI R19,LOW(1)
00030f cfe4      	RJMP _0x2000050
                 _0x2000052:
000310 c056      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000311 e320      	LDI  R18,LOW(48)
000312 81ee      	LDD  R30,Y+6
000313 81ff      	LDD  R31,Y+6+1
000314 940e 03d9 	CALL __GETW1PF
000316 87e8      	STD  Y+8,R30
000317 87f9      	STD  Y+8+1,R31
000318 81ee      	LDD  R30,Y+6
000319 81ff      	LDD  R31,Y+6+1
00031a 9632      	ADIW R30,2
00031b 83ee      	STD  Y+6,R30
00031c 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00031d 85e8      	LDD  R30,Y+8
00031e 85f9      	LDD  R31,Y+8+1
00031f 85aa      	LDD  R26,Y+10
000320 85bb      	LDD  R27,Y+10+1
000321 17ae      	CP   R26,R30
000322 07bf      	CPC  R27,R31
000323 f050      	BRLO _0x200005C
000324 5f2f      	SUBI R18,-LOW(1)
000325 85a8      	LDD  R26,Y+8
000326 85b9      	LDD  R27,Y+8+1
000327 85ea      	LDD  R30,Y+10
000328 85fb      	LDD  R31,Y+10+1
000329 1bea      	SUB  R30,R26
00032a 0bfb      	SBC  R31,R27
00032b 87ea      	STD  Y+10,R30
00032c 87fb      	STD  Y+10+1,R31
00032d cfef      	RJMP _0x200005A
                 _0x200005C:
00032e 332a      	CPI  R18,58
00032f f028      	BRLO _0x200005D
000330 ff03      	SBRS R16,3
000331 c002      	RJMP _0x200005E
000332 5f29      	SUBI R18,-LOW(7)
000333 c001      	RJMP _0x200005F
                 _0x200005E:
000334 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000335 fd04      	SBRC R16,4
000336 c01f      	RJMP _0x2000061
000337 3321      	CPI  R18,49
000338 f420      	BRSH _0x2000063
000339 85a8      	LDD  R26,Y+8
00033a 85b9      	LDD  R27,Y+8+1
00033b 9711      	SBIW R26,1
00033c f409      	BRNE _0x2000062
                 _0x2000063:
00033d c009      	RJMP _0x20000CA
                 _0x2000062:
00033e 1753      	CP   R21,R19
00033f f010      	BRLO _0x2000067
000340 ff00      	SBRS R16,0
000341 c001      	RJMP _0x2000068
                 _0x2000067:
000342 c01e      	RJMP _0x2000066
                 _0x2000068:
000343 e220      	LDI  R18,LOW(32)
000344 ff07      	SBRS R16,7
000345 c010      	RJMP _0x2000069
000346 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000347 6100      	ORI  R16,LOW(16)
000348 ff02      	SBRS R16,2
000349 c00c      	RJMP _0x200006A
00034a 7f0b      	ANDI R16,LOW(251)
00034b 934a      	ST   -Y,R20
00034c 85ed      	LDD  R30,Y+13
00034d 85fe      	LDD  R31,Y+13+1
00034e 93fa      	ST   -Y,R31
00034f 93ea      	ST   -Y,R30
000350 89e9      	LDD  R30,Y+17
000351 89fa      	LDD  R31,Y+17+1
000352 9509      	ICALL
000353 3050      	CPI  R21,0
000354 f009      	BREQ _0x200006B
000355 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000356 932a      	ST   -Y,R18
000357 85ed      	LDD  R30,Y+13
000358 85fe      	LDD  R31,Y+13+1
000359 93fa      	ST   -Y,R31
00035a 93ea      	ST   -Y,R30
00035b 89e9      	LDD  R30,Y+17
00035c 89fa      	LDD  R31,Y+17+1
00035d 9509      	ICALL
00035e 3050      	CPI  R21,0
00035f f009      	BREQ _0x200006C
000360 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000361 5031      	SUBI R19,LOW(1)
000362 85a8      	LDD  R26,Y+8
000363 85b9      	LDD  R27,Y+8+1
000364 9712      	SBIW R26,2
000365 f008      	BRLO _0x2000059
000366 cfaa      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000367 ff00      	SBRS R16,0
000368 c00d      	RJMP _0x200006D
                 _0x200006E:
000369 3050      	CPI  R21,0
00036a f059      	BREQ _0x2000070
00036b 5051      	SUBI R21,LOW(1)
00036c e2e0      	LDI  R30,LOW(32)
00036d 93ea      	ST   -Y,R30
00036e 85ed      	LDD  R30,Y+13
00036f 85fe      	LDD  R31,Y+13+1
000370 93fa      	ST   -Y,R31
000371 93ea      	ST   -Y,R30
000372 89e9      	LDD  R30,Y+17
000373 89fa      	LDD  R31,Y+17+1
000374 9509      	ICALL
000375 cff3      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000376 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000377 ce8d      	RJMP _0x2000016
                 _0x2000018:
000378 85ac      	LDD  R26,Y+12
000379 85bd      	LDD  R27,Y+12+1
00037a 940e 03d5 	CALL __GETW1P
00037c 940e 03e9 	CALL __LOADLOCR6
00037e 9664      	ADIW R28,20
00037f 9508      	RET
                 _printf:
000380 92ff      	PUSH R15
000381 2ef8      	MOV  R15,R24
000382 9726      	SBIW R28,6
000383 931a      	ST   -Y,R17
000384 930a      	ST   -Y,R16
000385 01de      	MOVW R26,R28
000386 9614      	ADIW R26,4
000387 940e 03c8 	CALL __ADDW2R15
000389 018d      	MOVW R16,R26
00038a e0e0      	LDI  R30,LOW(0)
00038b 83ec      	STD  Y+4,R30
00038c 83ed      	STD  Y+4+1,R30
00038d 83ee      	STD  Y+6,R30
00038e 83ef      	STD  Y+6+1,R30
00038f 01de      	MOVW R26,R28
000390 9618      	ADIW R26,8
000391 940e 03c8 	CALL __ADDW2R15
000393 940e 03d5 	CALL __GETW1P
000395 93fa      	ST   -Y,R31
000396 93ea      	ST   -Y,R30
000397 931a      	ST   -Y,R17
000398 930a      	ST   -Y,R16
000399 eeef      	LDI  R30,LOW(_put_usart_G100)
00039a e0f1      	LDI  R31,HIGH(_put_usart_G100)
00039b 93fa      	ST   -Y,R31
00039c 93ea      	ST   -Y,R30
00039d 01fe      	MOVW R30,R28
00039e 9638      	ADIW R30,8
00039f 93fa      	ST   -Y,R31
0003a0 93ea      	ST   -Y,R30
0003a1 de59      	RCALL __print_G100
0003a2 8119      	LDD  R17,Y+1
0003a3 8108      	LDD  R16,Y+0
0003a4 9628      	ADIW R28,8
0003a5 90ff      	POP  R15
0003a6 9508      	RET
                 
                 	.CSEG
                 _strlen:
0003a7 91a9          ld   r26,y+
0003a8 91b9          ld   r27,y+
0003a9 27ee          clr  r30
0003aa 27ff          clr  r31
                 strlen0:
0003ab 916d          ld   r22,x+
0003ac 2366          tst  r22
0003ad f011          breq strlen1
0003ae 9631          adiw r30,1
0003af cffb          rjmp strlen0
                 strlen1:
0003b0 9508          ret
                 _strlenf:
0003b1 27aa          clr  r26
0003b2 27bb          clr  r27
0003b3 91e9          ld   r30,y+
0003b4 91f9          ld   r31,y+
                 strlenf0:
0003b5 9005      	lpm  r0,z+
0003b6 2000          tst  r0
0003b7 f011          breq strlenf1
0003b8 9611          adiw r26,1
0003b9 cffb          rjmp strlenf0
                 strlenf1:
0003ba 01fd          movw r30,r26
0003bb 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _compareH:
000160           	.BYTE 0x1
                 _compareL:
000161           	.BYTE 0x1
                 _Espero_300ms:
000162           	.BYTE 0x2
                 _temptest:
000164           	.BYTE 0x2
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0003bc 91e9      	ld   r30,y+
0003bd 91f9      	ld   r31,y+
0003be 9630      	adiw r30,0
0003bf f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003c0 ed80     +LDI R24 , LOW ( 0x7D0 )
0003c1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003c2 9701     +SBIW R24 , 1
0003c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003c4 95a8      	wdr
0003c5 9731      	sbiw r30,1
0003c6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003c7 9508      	ret
                 
                 __ADDW2R15:
0003c8 2400      	CLR  R0
0003c9 0daf      	ADD  R26,R15
0003ca 1db0      	ADC  R27,R0
0003cb 9508      	RET
                 
                 __ANEGW1:
0003cc 95f1      	NEG  R31
0003cd 95e1      	NEG  R30
0003ce 40f0      	SBCI R31,0
0003cf 9508      	RET
                 
                 __CWD1:
0003d0 2f6f      	MOV  R22,R31
0003d1 0f66      	ADD  R22,R22
0003d2 0b66      	SBC  R22,R22
0003d3 2f76      	MOV  R23,R22
0003d4 9508      	RET
                 
                 __GETW1P:
0003d5 91ed      	LD   R30,X+
0003d6 91fc      	LD   R31,X
0003d7 9711      	SBIW R26,1
0003d8 9508      	RET
                 
                 __GETW1PF:
0003d9 9005      	LPM  R0,Z+
0003da 91f4      	LPM  R31,Z
0003db 2de0      	MOV  R30,R0
0003dc 9508      	RET
                 
                 __PUTPARD1:
0003dd 937a      	ST   -Y,R23
0003de 936a      	ST   -Y,R22
0003df 93fa      	ST   -Y,R31
0003e0 93ea      	ST   -Y,R30
0003e1 9508      	RET
                 
                 __SAVELOCR6:
0003e2 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003e3 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003e4 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003e5 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003e6 931a      	ST   -Y,R17
0003e7 930a      	ST   -Y,R16
0003e8 9508      	RET
                 
                 __LOADLOCR6:
0003e9 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ea 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003eb 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003ec 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ed 8119      	LDD  R17,Y+1
0003ee 8108      	LD   R16,Y
0003ef 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16L register use summary:
r0 :  14 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   1 r6 :   2 r7 :   3 
r8 :   4 r9 :   1 r10:   1 r11:   1 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  30 r17:  19 r18:  31 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  15 r25:   3 r26:  59 r27:  20 r28:  15 r29:   1 r30: 292 r31: 130 
x  :  13 y  : 207 z  :  13 
Registers used: 30 out of 35 (85.7%)

ATmega16L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  22 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   0 brne  :  29 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  28 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :  12 cpi   :  38 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  27 ld    :  18 ldd   :  87 ldi   : 123 
lds   :  12 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  17 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  52 pop   :   1 push  :   1 rcall :  18 ret   :  19 
reti  :   1 rjmp  :  61 rol   :   0 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   4 sbic  :   1 sbis  :   3 sbiw  :  21 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  76 std   :  40 sts   :  20 sub   :   1 subi  :  15 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega16L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007e0   1930     86   2016   16384  12.3%
[.dseg] 0x000060 0x000166      0      6      6    1119   0.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
