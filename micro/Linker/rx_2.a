;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#include <ctype.h>
;
; // Constantes
;
;#define xtal 3686400L // Frecuencia de cristal en [Hz]
;#define baud 9600     // define Baud rate
;#define beep PORTD.3
;#define pulso PIND.7
;#define testpoint PORTD.4
;
;// Prototipos de Funciones
;
;void mide(void);
;void beeper(void);
;void configurar(void);
;
;
;// global variables
;
;int conv;
;float Rx;
;char caracter=0, temp = 0;
;volatile unsigned char compareH=0, compareL=0;
;int i=0,nropulso = 0;;
;//int cantidad;
;//char buf[17];
;volatile int Espero_300ms = 1, temptest =0;

	.DSEG
;
;
;
;//**************** INTERRUPCIONES  ************//
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 // Place your code here
; 0000 0029     Espero_300ms = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 1
; 0000 002A 
; 0000 002B   if (temptest )
;PCODE: $00000011 VOL: 1
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002C   {temptest =0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 1
; 0000 002D     testpoint =0;}
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002E    else
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002F    {temptest =1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 1
; 0000 0030     testpoint =1;}
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0031 
; 0000 0032     TCNT1H=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033     TCNT1L=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;
;//************** MAIN **************************/
;
;
;void main(void)
; 0000 003C {
;PCODE: $00000026 VOL: 0
; 0000 003D     beeper();
;PCODE: $00000027 VOL: 0
; 0000 003E     configurar();
;PCODE: $00000028 VOL: 0
; 0000 003F     beeper();
;PCODE: $00000029 VOL: 0
; 0000 0040     beeper();
;PCODE: $0000002A VOL: 0
; 0000 0041 while(1) //loop principal
;PCODE: $0000002B VOL: 0
; 0000 0042 {   inicio:
;PCODE: $0000002C VOL: 0
; 0000 0043     beep = 1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0044     caracter = getchar();
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0045     switch (caracter)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0046     {
; 0000 0047         case 'i':
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0048         case 'I':
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0049             // modo medicion, mide cada 300ms 49 veces
; 0000 004A             // (2grad/min => mide cada 0.01 grado)
; 0000 004B             // y espera el flanco ascendente en el pin
; 0000 004C             // para volver a empezar y quedar sincronizado con el marker
; 0000 004D 
; 0000 004E             TCCR1B=0x00;    //el timer esta apagado
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004F             TCNT1H=0x00;    // y el contador vale cero
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0050             TCNT1L=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0051             beeper();
;PCODE: $00000040 VOL: 0
; 0000 0052             while (1)
;PCODE: $00000041 VOL: 0
; 0000 0053             {
; 0000 0054                 nropulso = 0;
;PCODE: $00000042 VOL: 0
; 0000 0055                 Espero_300ms = 1;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
; 0000 0056                 while(pulso == 1); //espera marker en bajo para empezar
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0057                 //printf("mark\n");
; 0000 0058                 TCCR1B=0x0C;    //con esto enciendo el timer
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0059                 mide();            // 80 mseg
;PCODE: $0000004D VOL: 0
; 0000 005A                 //Rx=(float)conv*2560/1023;
; 0000 005B                 //nropulso++;
; 0000 005C                 //printf("%.2f\n",Rx); // 16.6 mseg en transmitir
; 0000 005D                 //printf("pulso nro %d\n", nropulso);
; 0000 005E                 printf("%d\n",conv);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005F                 beeper();          // 100 mse
;PCODE: $00000058 VOL: 0
; 0000 0060                 for ( i=49; i>0; i-- )
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0061                 {
; 0000 0062                     while(Espero_300ms);    //el timer pone Espero_300ms = 0 en la interrupcion
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0063                     Espero_300ms = 1;   //
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 1
; 0000 0064                     mide();            // 80 mseg
;PCODE: $0000006A VOL: 0
; 0000 0065                     //Rx=(float)conv*2560/1023;
; 0000 0066                     //nropulso++;
; 0000 0067                     //printf("%.2f\n",Rx); // 16.6 mseg en transmitir
; 0000 0068                     printf("%d\n",conv);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0069                  //   printf("pulso nro %d\n", nropulso);
; 0000 006A 
; 0000 006B                     beeper();          // 100 mse
;PCODE: $00000075 VOL: 0
; 0000 006C                     if (UCSRA & 0b10000000) //comprobar si hay un byte para leer en la uart
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006D                     {
; 0000 006E                         temp = getchar();
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006F                         switch( temp)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0070                         {
; 0000 0071                             case 'T':   //condicion para terminar, recibir una 'T'
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0072                                 Espero_300ms = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 1
; 0000 0073                                 TCCR1B=0x00;    //con esto apago el timer
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0074                                 TCNT1H=0x00;    // y el contador vale cero
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0075                                 TCNT1L=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0076                                 beeper();          // 100 mse
;PCODE: $00000087 VOL: 0
; 0000 0077                                 beeper();          // 100 mse
;PCODE: $00000088 VOL: 0
; 0000 0078                                 beeper();          // 100 mse
;PCODE: $00000089 VOL: 0
; 0000 0079                                 goto inicio;
;PCODE: $0000008A VOL: 0
; 0000 007A                                 break;
;PCODE: $0000008B VOL: 0
; 0000 007B 
; 0000 007C                             case 'U':   //aumento el delay entre mediciones
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007D                                 compareH += 1;
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 1
; 0000 007E                                 break;
;PCODE: $00000092 VOL: 0
; 0000 007F                             case 'u':   //aumento el delay entre mediciones
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0080                                 compareL += 10;
;PCODE: $00000096 VOL: 1
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 1
; 0000 0081                                 break;
;PCODE: $00000099 VOL: 0
; 0000 0082                             case 'L':   //disminuyo el delay entre mediciones
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0083                                 compareH -= 1 ;
;PCODE: $0000009D VOL: 1
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 1
; 0000 0084                                 break;
;PCODE: $000000A1 VOL: 0
; 0000 0085                             case 'l':   //disminuyo el delay entre mediciones
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086                                 compareL -=10 ;
;PCODE: $000000A5 VOL: 1
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 1
; 0000 0087                                 break;
;PCODE: $000000A9 VOL: 0
; 0000 0088                             default:
;PCODE: $000000AA VOL: 0
; 0000 0089                                 break;
;PCODE: $000000AB VOL: 0
; 0000 008A                         }
;PCODE: $000000AC VOL: 0
; 0000 008B                         OCR1AH = compareH;
;PCODE: $000000AD VOL: 1
;PCODE: $000000AE VOL: 0
; 0000 008C                         OCR1AL = compareL;
;PCODE: $000000AF VOL: 1
;PCODE: $000000B0 VOL: 0
; 0000 008D                         printf("OCR1AH vale, %x\n", OCR1AH);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 008E                         printf("OCR1AL vale %x\n", OCR1AL);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 008F 
; 0000 0090                     }
; 0000 0091                 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0092                 Espero_300ms = 1;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 1
; 0000 0093                 TCCR1B=0x00;    //con esto apago el timer
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0094                 TCNT1H=0x00;    // y el contador vale cero
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0095                 TCNT1L=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0096 
; 0000 0097             }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0098             break;
;PCODE: $000000D6 VOL: 0
; 0000 0099         case 'p':
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 009A         case 'P':
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 009B             // Prueba de comunicacion
; 0000 009C             printf("COM OK \n");
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 009D             beeper();          // 100 mse
;PCODE: $000000E6 VOL: 0
; 0000 009E             break;
;PCODE: $000000E7 VOL: 0
; 0000 009F         default:
;PCODE: $000000E8 VOL: 0
; 0000 00A0             putchar(caracter);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A1             break;
;PCODE: $000000EB VOL: 0
; 0000 00A2 
; 0000 00A3     }
;PCODE: $000000EC VOL: 0
; 0000 00A4 
; 0000 00A5 }// fin loop principal
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A6 }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;    /*
;    while(pulso == 1);      // espera pulso  y manda primer medida
;    mide();            // 80 mseg
;    Rx=(float)conv*2560/1023;
;    printf("%.2f",Rx); // 16.6 mseg en transmitir
;    beeper();          // 100 mseg
;
;    while(1)
;    {
;        switch(getchar())// espera que llegue la orden de medor
;        {
;            case '1':mide();            // 80 mseg
;                  Rx=(float)conv*2560/1023;
;                  printf("%.2f",Rx); // 16.6 mseg en transmitir
;                  beeper();          // 100 mseg
;                  break;             //
;            case 'T':goto inicio;
;            case 'P':printf("comunicacion ON /n");
;                  break;
;        }
;    }
;}
;*/
;
;/*************************************************
;                    FUNCIONES
;**************************************************/
;
;
;/*------------------ FUNCION CONFIGURAR ----------------*/
;
;void configurar(void)
; 0000 00C8 {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00C9      MCUCR=0X00;      // asegura no memoria externa
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00CA 
; 0000 00CB      DDRA=0X00;       //Puera A entradas analogicas
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00CC      PORTA=0XF0;      //habilita pull-up MSB
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00CD 
; 0000 00CE      DDRB=0XFF;       // LSB salidas = control display
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00CF      PORTB=0XFF;      // MSB salidas = SPI y RAM
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00D0 
; 0000 00D1      DDRC=0b00000000; // LSB entradas = Teclado
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00D2      PORTC=0xFF;      // 1/2 MSB entradas =llsve y seguro
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00D3 
; 0000 00D4      DDRD=0x1F;       // LSB RS232, interrup y chirrara y testpoint
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00D5      PORTD=0xFF;      // MSB entradas con Pull- UP
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00D6 
; 0000 00D7 
; 0000 00D8       /*----------- inicializa Puerta serie ----------- */
; 0000 00D9 
; 0000 00DA      UCSRA=0x00;   //  4800 Baudios  8 Data, 1 Stop, No Parity
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00DB      UCSRB=0x18;   //  Rx On ; Tx On
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00DC      UCSRC=0x86;   //  USART modo asincronico
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00DD      UBRRH=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00DE      UBRRL=xtal/16/baud-1;  //4800
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00DF      //UBRRL=0x17;        //0x17 => 9600
; 0000 00E0 
; 0000 00E1      /*---------- Inicializa ADC ------------------*/
; 0000 00E2 
; 0000 00E3      ADCSRA=0x86;     // ADC Clock frequencia: 57.656 kHz
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00E4                       // sin interrupcion
; 0000 00E5      ADMUX=0b11000000;// Selecciona input simple en canal 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00E6                       // y referencia interna=2,56V
; 0000 00E7 
; 0000 00E8      /*-------------- Inicializa Timer1 ---------------*/
; 0000 00E9     // Timer/Counter 1 initialization
; 0000 00EA     // Clock source: System Clock
; 0000 00EB     // Clock value: 31,250 kHz
; 0000 00EC     // Mode: CTC top=OCR1A
; 0000 00ED     // OC1A output: Discon.
; 0000 00EE     // OC1B output: Discon.
; 0000 00EF     // Noise Canceler: Off
; 0000 00F0     // Input Capture on Falling Edge
; 0000 00F1     // Timer1 Overflow Interrupt: Off
; 0000 00F2     // Input Capture Interrupt: Off
; 0000 00F3     // Compare A Match Interrupt: On
; 0000 00F4     // Compare B Match Interrupt: Off
; 0000 00F5 
; 0000 00F6 
; 0000 00F7     TCCR1A=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00F8     TCCR1B=0x0C;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00F9     TCNT1H=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00FA     TCNT1L=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00FB     ICR1H=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FC     ICR1L=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00FD     //compareH = 0x21;
; 0000 00FE     //compareL =0xAD;
; 0000 00FF     //  el valor haciendo cuentas me de h21C0, para un prescaler de 256, que es lo que esta elegido
; 0000 0100     //   el valor que esta puesto es bajisimo, es h10d6, probemos,
; 0000 0101     //   sino probemos con h10e0 que anda por ahi
; 0000 0102     compareH = 0x21;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 1
; 0000 0103     compareL =0xAD;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 1
; 0000 0104     OCR1AH=compareH;
;PCODE: $00000124 VOL: 1
;PCODE: $00000125 VOL: 0
; 0000 0105     OCR1AL=compareL;
;PCODE: $00000126 VOL: 1
;PCODE: $00000127 VOL: 0
; 0000 0106     OCR1BH=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0107     OCR1BL=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0108 
; 0000 0109     /*inicializacion de interrupciones del timer*/
; 0000 010A     TIMSK=0x10;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 010B 
; 0000 010C     //habilito globalmente las interruciones
; 0000 010D     #asm("sei")
;PCODE: $0000012E VOL: 0
	sei
;PCODE: $0000012F VOL: 0
; 0000 010E 
; 0000 010F }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;
;/*--------------- FUNCION BEEPER ------------------------------------*/
;
; void beeper(void)
; 0000 0114   {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0115     beep = 0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0116     delay_ms(50);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0117     if(conv < 799){ beep = 1;} // si es manor a 2v = 799 cuentas apaga
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0118     //delay_ms(150);
; 0000 0119 
; 0000 011A 
; 0000 011B   }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;
; /*------------------ FUNCION MIDE ----------------*/
;
;
;void mide(void)
; 0000 0121 {
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0122  // mide
; 0000 0123   ADMUX=0b11000000;   // entrada simple canal 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0124   delay_ms(70);      // y referencia interna = 2,56V
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0125   ADCSRA|=0x40;       // Arranca conversor AD
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0126   delay_ms(10);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0127   conv=ADCW & 0x03FF; // adquiere el dato en 10 bits
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0128                       // 2560 mV = 1024 cuentas = 2.56 volts =>
; 0000 0129   //conv=0x03ff;        // esto para probar
; 0000 012A }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
